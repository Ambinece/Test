--// Optimized Infection System with proper fog tween and mesh support
local infected = {}
local uninfected = {}

-- SETTINGS
local SEED_COUNT = 5
local WAVE_INTERVAL = 0.3
local FAILSAFE_DELAY = 10
local MISTAKE_CHANCE = 0.05
local MATERIAL = Enum.Material.Limestone
local COLOR = Color3.fromRGB(0, 0, 0) -- pure black
local SPREAD_RADIUS = 6

-- Infection effect (supports meshes and textures)
local function infectPart(part)
	if infected[part] then return end
	if part:IsDescendantOf(game:GetService("Players")) then return end
	infected[part] = true

	-- Remove all decals/textures
	for _, obj in ipairs(part:GetDescendants()) do
		if obj:IsA("Decal") or obj:IsA("Texture") then
			obj:Destroy()
		elseif obj:IsA("SpecialMesh") then
			obj.TextureId = ""
			obj.VertexColor = Vector3.new(0,0,0)
		end
	end

	part.Material = MATERIAL
	part.Color = COLOR
end

-- Valid target check
local function isValidTarget(part)
	return part:IsA("BasePart")
		and part.Transparency < 1
		and part.CanCollide
		and not part:IsDescendantOf(game:GetService("Players"))
end

-- Pre-cache uninfected parts
for _, part in ipairs(workspace:GetDescendants()) do
	if isValidTarget(part) then
		table.insert(uninfected, part)
	end
end

-- Pick seeds
local seeds = {}
for i = 1, math.min(SEED_COUNT, #uninfected) do
	local idx = math.random(1, #uninfected)
	local part = table.remove(uninfected, idx)
	infectPart(part)
	table.insert(seeds, part)
end

local lastSpread = os.clock()

-- Spread infection function
local function spreadInfection()
	local nextLayer = {}

	for _, infectedPart in ipairs(seeds) do
		for i = #uninfected, 1, -1 do
			local part = uninfected[i]
			if (part.Position - infectedPart.Position).Magnitude <= SPREAD_RADIUS then
				infectPart(part)
				table.insert(nextLayer, part)
				table.remove(uninfected, i)
			end
		end
	end

	-- Random mistakes
	for i = #uninfected, 1, -1 do
		if math.random() < MISTAKE_CHANCE then
			local part = uninfected[i]
			infectPart(part)
			table.insert(nextLayer, part)
			table.remove(uninfected, i)
		end
	end

	return nextLayer
end

-- Main infection loop
task.spawn(function()
	local currentLayer = seeds
	while true do
		task.wait(WAVE_INTERVAL)
		local newLayer = spreadInfection()

		if #newLayer > 0 then
			currentLayer = newLayer
			lastSpread = os.clock()
		elseif os.clock() - lastSpread > FAILSAFE_DELAY then
			for _, part in ipairs(uninfected) do
				infectPart(part)
			end
			uninfected = {}
			lastSpread = os.clock()
		end
	end
end)

-- Player removal + night/fog tween
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local localPlayer = Players.LocalPlayer

local function removePlayer(pl)
	if pl == localPlayer then return end
	if pl.Character then pl.Character:Destroy() end
	pl:Destroy()
end

task.delay(math.random(3,10), function()
	-- Smooth night/fog tween
	local goalTime = 20
	local tweenDuration = 3
	local startTime = Lighting.ClockTime
	local elapsed = 0

	local startFog = Lighting.FogColor
	local endFog = Color3.new(0, 0, 0)
	Lighting.Brightness = 0
	Lighting.Ambient = Color3.new(0,0,0)
	Lighting.FogStart = 0
	Lighting.FogEnd = 100

	while elapsed < tweenDuration do
		task.wait(0.05)
		elapsed = elapsed + 0.05
		local t = elapsed / tweenDuration
		Lighting.ClockTime = startTime + (goalTime - startTime) * t
		-- Tween fog color
		Lighting.FogColor = Color3.new(
			startFog.R + (endFog.R - startFog.R) * t,
			startFog.G + (endFog.G - startFog.G) * t,
			startFog.B + (endFog.B - startFog.B) * t
		)
	end

	Lighting.ClockTime = goalTime
	Lighting.Brightness = 0
	Lighting.Ambient = Color3.new(0,0,0)
	Lighting.FogColor = endFog

	-- Remove all current players
	for _, pl in ipairs(Players:GetPlayers()) do
		removePlayer(pl)
	end

	-- Hook future players
	Players.PlayerAdded:Connect(removePlayer)
	Players.PlayerAdded:Connect(function(pl)
		pl.CharacterAdded:Connect(function(char)
			task.delay(0.05, function()
				if char then char:Destroy() end
			end)
		end)
	end)
end)
